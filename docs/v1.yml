openapi: '3.0.2'
info:
  title: Banking System API
  version: '1.0'
  description: Basic API for banking system that has user with multi-accounts and transactions handling.
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@gmail.com
    Profile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        identityType:
          type: string
          example: KTP
        identityNumber:
          type: integer
          example: 564738291
        address:
          type: string
          example: North America
        userId:
          type: integer
          example: 1
    Account:
      type: object
      properties:
        id:
          type: integer
          example: 1
        bankName:
          type: string
          example: BNR
        bankAccountNumber:
          type: integer
          example: 512234567
        balance:
          type: integer
          example: 100000
        userId:
          type: integer
          example: 1
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sourceAccountId:
          type: integer
          example: 2
        destinationAccountId:
          type: integer
          example: 3
        amount:
          type: integer
          example: 250000
    BadRequestResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
        data:
          type: integer
          example: null
    UnauthorizedResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: not authorized
        data:
          type: integer
          example: null
  requestBodies:
    User:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: John Doe
              email:
                type: string
                example: john@gmail.com
              password:
                type: string
                example: john#
              identityType:
                type: string
                example: KTP
              identityNumber:
                type: integer
                example: 564738291
              address:
                type: string
                example: North America
    Account:
      content:
        application/json:
          schema:
            type: object
            properties:
              bankName:
                type: string
                example: BNR
              bankAccountNumber:
                type: integer
                example: 512234567
              balance:
                type: integer
                example: 0
              userId:
                type: integer
                example: 1
    Transaction:
      content:
        application/json:
          schema:
            type: object
            properties:
              sourceAccountId:
                type: integer
                example: 1
              destinationAccountId:
                type: integer
                example: 2
              amount:
                type: integer
                example: 250000

paths:
  /api/v1:
    get:
      description: Checks connection to server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully connected to server
                  data:
                    type: object
                    example: null
  /api/v1/auth/register:
    post:
      description: Register a new user record
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully create new user data with corresponding profile
                  data:
                    $ref: '#/components/schemas/User'
                    properties:
                      profile:
                        $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    oneOf:
                      - example: field 'name', 'email', 'password', 'identityType', 'identityNumber', and 'address' are required
                      - example: field identityType should have value of 'KTP', 'SIM', or 'Passport'
                      - example: already found a user profile record with corresponding identity number
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/auth/login:
    post:
      description: Login with registered credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@gmail.com
                password:
                  type: string
                  example: john#
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: login successfully
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzksIm5hbWUiOiJKb2huIERvZSIsImVtYWlsIjoiam9obkBnbWFpbC5jb20iLCJpYXQiOjE3MTM1OTgwNjR9.eb5k29XYGudrGriq-jeFGTPpLqxptI6FwqXxuX-gV7Y
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    oneOf:
                      - example: field 'email' and 'password' are required
                      - example: invalid email or password
  /api/v1/auth/authenticate:
    get:
      description: Fetch all user records
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched 1 user records
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/users:
    get:
      description: Fetch all user records
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
          name: search
          in: query
          required: false
          description: User's name keyword
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched 1 user records
                  data:
                    items:
                      $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/users/{id}:
    get:
      description: Fetch a specific user record including the profile
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          required: true
          description: User's unique id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched user record with id 1
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
                    properties:
                      profile:
                        $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    example: cannot find user record with id -1
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/accounts:
    get:
      description: Fetch all account records
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched 1 account records
                  data:
                    items:
                      $ref: '#/components/schemas/Account'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
    post:
      description: Create a new account record
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Account'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully created new account data
                  data:
                    type: object
                    $ref: '#/components/schemas/Account'
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    oneOf:
                      - example: field 'bankName', 'bankAccountNumber', and 'userId' are required
                      - example: already found an account record with corresponding bankAccountNumber
                      - example: cannot create account for user that did not exists
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/accounts/{id}:
    get:
      description: Fetch a specific account record including the user's profile
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          required: true
          description: Account's unique id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched account record with id 1
                  data:
                    type: object
                    $ref: '#/components/schemas/Account'
                    properties:
                      user:
                        type: object
                        $ref: '#/components/schemas/User'
                        properties:
                          profile:
                            $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    example: cannot find account record with id -1
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/transactions:
    get:
      description: Fetch all transaction records
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched 1 transaction records
                  data:
                    items:
                      $ref: '#/components/schemas/Transaction'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
    post:
      description: Create a new account record
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully created new transaction data
                  data:
                    type: object
                    $ref: '#/components/schemas/Transaction'
                    properties:
                      sourceAccount:
                        type: object
                        $ref: '#/components/schemas/Account'
                        properties:
                          user: 
                            $ref: '#/components/schemas/User'
                      destinationAccount:
                        type: object
                        $ref: '#/components/schemas/Account'
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    oneOf:
                      - example: field 'sourceAccountId', 'destinationAccountId', and 'amount' are required
                      - example: field 'sourceAccountId' and 'destinationAccountId' should not have the same value
                      - example: cannot create transaction with source account that does not exist
                      - example: cannot create transaction from source account with id 1 that has insufficient balance (current balance is 0)
                      - example: cannot create transaction with destination account that does not exist
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /api/v1/transactions/{id}:
    get:
      description: Fetch a specific transaction record including the account's user
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: integer
            minimum: 1
          name: id
          in: path
          required: true
          description: Transaction's unique id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully fetched transaction record with id 1
                  data:
                    type: object
                    $ref: '#/components/schemas/Transaction'
                    properties:
                      sourceAccount:
                        type: object
                        $ref: '#/components/schemas/Account'
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                      destinationAccount:
                        type: object
                        $ref: '#/components/schemas/Account'
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestResponse'
                properties:
                  message:
                    example: cannot find transaction record with id -1
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
